--lpm_clshift CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" LPM_SHIFTTYPE="ARITHMETIC" LPM_WIDTH=16 LPM_WIDTHDIST=4 data direction distance result underflow
--VERSION_BEGIN 9.1 cbx_lpm_clshift 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = 
SUBDESIGN lpm_clshift_5ud
( 
	data[15..0]	:	input;
	direction	:	input;
	distance[3..0]	:	input;
	result[15..0]	:	output;
	underflow	:	output;
) 
VARIABLE 
	direction_w[0..0]	: WIRE;
	inz_w[16..0]	: WIRE;
	pad_left_w[7..0]	: WIRE;
	pad_right_w0w[1..0]	: WIRE;
	pad_right_w1w[2..0]	: WIRE;
	pad_right_w2w[4..0]	: WIRE;
	pad_right_w3w[8..0]	: WIRE;
	sbit_w[79..0]	: WIRE;
	uf_w[16..0]	: WIRE;

BEGIN 
	direction_w[] = ( direction);
	inz_w[] = ( B"0", ((data[15..15] $ data[15..15]) # inz_w[16..16]), ((data[15..15] $ data[14..14]) # inz_w[15..15]), ((data[15..15] $ data[13..13]) # inz_w[14..14]), ((data[15..15] $ data[12..12]) # inz_w[13..13]), ((data[15..15] $ data[11..11]) # inz_w[12..12]), ((data[15..15] $ data[10..10]) # inz_w[11..11]), ((data[15..15] $ data[9..9]) # inz_w[10..10]), ((data[15..15] $ data[8..8]) # inz_w[9..9]), ((data[15..15] $ data[7..7]) # inz_w[8..8]), ((data[15..15] $ data[6..6]) # inz_w[7..7]), ((data[15..15] $ data[5..5]) # inz_w[6..6]), ((data[15..15] $ data[4..4]) # inz_w[5..5]), ((data[15..15] $ data[3..3]) # inz_w[4..4]), ((data[15..15] $ data[2..2]) # inz_w[3..3]), ((data[15..15] $ data[1..1]) # inz_w[2..2]), ((data[15..15] $ data[0..0]) # inz_w[1..1]));
	pad_left_w[] = B"00000000";
	pad_right_w0w[] = ( sbit_w[15..15], sbit_w[15..15]);
	pad_right_w1w[] = ( sbit_w[31..31], sbit_w[31..31], sbit_w[31..31]);
	pad_right_w2w[] = ( sbit_w[47..47], sbit_w[47..47], sbit_w[47..47], sbit_w[47..47], sbit_w[47..47]);
	pad_right_w3w[] = ( sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63], sbit_w[63..63]);
	result[15..0] = sbit_w[79..64];
	sbit_w[] = ( ((((distance[3..3] & (! direction_w[])) & ( sbit_w[55..48], pad_left_w[7..0])) # ((distance[3..3] & direction_w[]) & ( pad_right_w3w[7..0], sbit_w[63..56]))) # ((! distance[3..3]) & sbit_w[63..48])), ((((distance[2..2] & (! direction_w[])) & ( sbit_w[43..32], pad_left_w[3..0])) # ((distance[2..2] & direction_w[]) & ( pad_right_w2w[3..0], sbit_w[47..36]))) # ((! distance[2..2]) & sbit_w[47..32])), ((((distance[1..1] & (! direction_w[])) & ( sbit_w[29..16], pad_left_w[1..0])) # ((distance[1..1] & direction_w[]) & ( pad_right_w1w[1..0], sbit_w[31..18]))) # ((! distance[1..1]) & sbit_w[31..16])), ((((distance[0..0] & (! direction_w[])) & ( sbit_w[14..0], pad_left_w[0..0])) # ((distance[0..0] & direction_w[]) & ( pad_right_w0w[0..0], sbit_w[15..1]))) # ((! distance[0..0]) & sbit_w[15..0])), data[]);
	uf_w[] = ( B"0", ((data[15..15] $ sbit_w[79..79]) # uf_w[16..16]), ((data[15..15] $ sbit_w[78..78]) # uf_w[15..15]), ((data[15..15] $ sbit_w[77..77]) # uf_w[14..14]), ((data[15..15] $ sbit_w[76..76]) # uf_w[13..13]), ((data[15..15] $ sbit_w[75..75]) # uf_w[12..12]), ((data[15..15] $ sbit_w[74..74]) # uf_w[11..11]), ((data[15..15] $ sbit_w[73..73]) # uf_w[10..10]), ((data[15..15] $ sbit_w[72..72]) # uf_w[9..9]), ((data[15..15] $ sbit_w[71..71]) # uf_w[8..8]), ((data[15..15] $ sbit_w[70..70]) # uf_w[7..7]), ((data[15..15] $ sbit_w[69..69]) # uf_w[6..6]), ((data[15..15] $ sbit_w[68..68]) # uf_w[5..5]), ((data[15..15] $ sbit_w[67..67]) # uf_w[4..4]), ((data[15..15] $ sbit_w[66..66]) # uf_w[3..3]), ((data[15..15] $ sbit_w[65..65]) # uf_w[2..2]), ((data[15..15] $ sbit_w[64..64]) # uf_w[1..1]));
	underflow = ((direction_w[0..0] & (! uf_w[0..0])) & inz_w[0..0]);
END;
--VALID FILE
